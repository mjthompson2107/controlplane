#!/usr/bin/env bash
selectedNode="$1"
component=$2
if [[ "$component" == "" ]] ; then componentPath="_solution"; else componentPath="_solution/${component}"; fi

if [[ -d ${componentPath}/_module ]] ; then rm -rf ${componentPath}/_module; fi

moduleImage=$(echo ${VCW_COMPONENT_MODULE} | cut -d'/' -f1-2);
moduleSubNode=$(echo ${VCW_COMPONENT_MODULE} | cut -d'/' -f3-)
if [[ "$moduleSubnode" != "" ]] ; then moduleSubnode="${moduleSubnode}/"; fi
. executionplane-capture-output docker create ${VCW_REGISTRY}${moduleImage}
executionplane docker container cp ${VCW_EXECUTIONPLANE_OUTPUT}:/vcw/repo/${moduleSubNode}_module /vcw/pwd/${selectedNode}/${componentPath}/_module

# iterate over initialised volumes and copy contents from configs folder into configs folder withinin _module
# this gives a clean starting position
#IFS=$'\n' read -d '' -r -a volumes < ${componentPath}//_module/volumes-initialised
#for volumeSettings in ${volumes[@]};
#do
#	volumeName=$(echo $volumeSettings | cut -d':' -f 1);
#	if [[ ! -d ${componentPath}//_module/_configs ]] ; then mkdir ${componentPath}//_module/_configs; fi;
#	if [[ -d $tmpFolder/configs/$volumeName ]] ; then cp -r $tmpFolder/configs/$volumeName ${componentPath}/_module/_configs; fi
#done;
#
#rm -rf $tmpFolder
#chmod -R 777 $componentPath
