#!/usr/bin/env bash
shopt -s nullglob
selectedNode="$1"

# Remove unregistered packages
if [[ ! -d _module/packages ]] ; then mkdir _module/packages; chmod -R 777 _module/packages; fi
for f in _module/packages/* ; do if [[ "${VCW_MODULE_PACKAGES}" != *"$(basename $f):"* ]] ; then rm -rf $f; fi; done

if [[ ! -d _module/import ]] ; then mkdir _module/import; chmod -R 777 _module/import; fi
IFS=',' read -r -a modulePackages <<< "${VCW_MODULE_PACKAGES}"
for packageConfig in ${modulePackages[@]};
do
	package=$(echo $packageConfig | cut -d':' -f 1)
	stack=$(echo $packageConfig | cut -d':' -f 2)
	imageName=$(echo $stack | cut -d'/' -f1-2)
	subNode=$(echo $stack | cut -d'/' -f3-)
	if [[ "$subNode" != "" ]] ; then subNode="${subNode}/"; fi

	if [[ ! -d _module/import/${package} ]] ; then mkdir _module/import/${package}; fi
	if [[ ! -d _module/packages/${package} ]] ; then mkdir _module/packages/${package}; chmod -R 777 _module/packages/${package}; fi

	. executionplane-capture-output docker create "${VCW_REGISTRY}$imageName"
  executionplane docker container cp ${VCW_EXECUTIONPLANE_OUTPUT}:/vcw/repo/${subNode}_stack/. /vcw/pwd/${selectedNode}/_module/import/${package}/
	chmod -R 777 _module/import/${package}
	(
		. _module/import/${package}/settings.stack
		oldPackage=$(echo "${VCW_STACK_GLOBAL_STACKNAMES}" | cut -d',' -f1)

		# settings files
		sed -i -e "s/${oldPackage^^}_/${package^^}_/g" _module/import/${package}/settings.stack
		sed -i -e "s/${oldPackage}/${package}/g" _module/import/${package}/settings.stack
		cp _module/import/${package}/settings.stack _module/packages/${package}/settings.package
		if [[ ! -f _module/packages/${package}/settings ]] ; then cp _module/import/${package}/settings.stack _module/packages/${package}/settings; fi

    # docker-compose files
		IFS=',' read -r -a stackNames <<< "${VCW_STACK_GLOBAL_STACKNAMES}"
		for stackName in ${stackNames[@]};
		do
			newStackName=$(echo "$stackName" | sed "s/${oldPackage}/${package}/g")
			sed -i -e "s/${stackName^^}_/${newStackName^^}_/g" _module/import/${package}/stacks/${stackName}.docker-compose.yml
			sed -i -e "s/${stackName}_/${newStackName}_/g" _module/import/${package}/stacks/${stackName}.docker-compose.yml
			cp _module/import/${package}/stacks/${stackName}.docker-compose.yml _module/packages/${package}/_${newStackName}.docker-compose.yml
		done;

		# configs and volumes folders
		oldStack="${oldPackage:9}"
		let "prefix = ${#oldPackage}"
		for f in _module/import/$package/configs/*
		do
			if [[ ! -d _module/configs ]] ; then mkdir _module/configs; fi
			if [[ ! -d _module/configs/_packages ]] ; then mkdir _module/configs/_packages; fi
			itemName=$(basename $f)
			newItemName="$package${itemName:$prefix}"
			if [[ _module/configs/_packages/$newItemName ]] ; then rm -rf _module/configs/_packages/$newItemName; fi
			mv  _module/import/$package/configs/$itemName _module/configs/_packages/$newItemName
			if [[ ! -d _module/configs/$newItemName ]] ; then cp -r _module/configs/_packages/$newItemName _module/configs/$newItemName; fi
	  done
		for f in _module/import/$package/volumes/*
		do
			if [[ ! -d _module/volumes ]] ; then mkdir _module/volumes; fi
			if [[ ! -d _module/volumes/_packages ]] ; then mkdir _module/volumes/_packages; fi
			itemName=$(basename $f)
			newItemName="$package${itemName:$prefix}"
			if [[ _module/volumes/_packages/$newItemName ]] ; then rm -rf _module/volumes/_packages/$newItemName; fi
			mv  _module/import/$package/volumes/$itemName _module/volumes/_packages/$newItemName
			if [[ ! -d _module/volumes/$newItemName ]] ; then cp -r _module/volumes/_packages/$newItemName _module/volumes/$newItemName; fi
	  done
	)
done;
chmod -R 777 _module/*
rm -rf _module/import
